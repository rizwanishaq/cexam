{"version":3,"sources":["components/question-modal/cancel.svg","add.svg","components/question/index.js","components/questions/index.js","components/question-form/index.js","components/question-modal/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","question","onNextClicked","useState","answered","setAnswered","selectedOption","setSelectedOption","isCorrect","option","correct_answer","className","src","image","downloadUrl","alt","onClick","incorrect_answers","sort","Math","random","map","index","key","onOptionClicked","disabled","Questions","questions","setQuestions","currentIndex","setCurrentIndex","score","setScore","showFinished","setShowFinished","useEffect","a","axios","get","response","data","fetchData","length","QuestionForm","closeModal","questionCreate","questionForm","setQuestion","handleSubmit","e","preventDefault","post","console","log","toast","handleInputChange","event","target","name","value","action","id","onSubmit","type","placeholder","onChange","options","maxTags","inputProps","customStyles","content","top","left","right","bottom","marginRight","transform","border","width","height","background","boxShadow","Modal","setAppElement","QuestionModal","isOpen","onRequestClose","style","contentLabel","Close","App","modalOpen","setModalOpen","_","Add","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a3b0f1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.ca028cb4.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.e71bd150.svg\";","import React, { useState } from \"react\";\nimport \"./question.css\";\n\nconst Question = ({ question, onNextClicked }) => {\n  const [answered, setAnswered] = useState(false);\n  const [selectedOption, setSelectedOption] = useState({});\n\n  const onOptionClicked = (option) => {\n    setAnswered(true);\n    setSelectedOption(option);\n  };\n\n  const isCorrect = (option) => {\n    return option === question.correct_answer;\n  };\n\n  const resetQuestion = () => {\n    setAnswered(false);\n    setSelectedOption({});\n    onNextClicked(selectedOption);\n  };\n\n  return (\n    <div className=\"question\">\n      <div className=\"question-image-holder\">\n        <img\n          className=\"question-image\"\n          src={\n            question.image\n              ? question.image.downloadUrl\n              : \"https://upload.wikimedia.org/wikipedia/en/thumb/9/9a/Flag_of_Spain.svg/1280px-Flag_of_Spain.svg.png\"\n          }\n          alt={question}\n        />\n      </div>\n      <section>\n        <div className=\"question-text-holder\">\n          {answered && <button onClick={resetQuestion}>Next</button>}\n          <h4 className=\"question-text\">{question.question}</h4>\n        </div>\n\n        {[...question.incorrect_answers, question.correct_answer]\n          .sort(() => Math.random() - 0.5)\n          .map((option, index) => {\n            return (\n              <button\n                key={index}\n                onClick={() => onOptionClicked(option)}\n                disabled={answered && !isCorrect(option)}\n                className={`question-option ${answered &&\n                  isCorrect(option) &&\n                  \"correct\"}\n              ${selectedOption === option && !isCorrect(option) && \"wrong\"}\n              `}\n              >\n                <span>\n                  {answered ? (isCorrect(option) ? \"âœ”\" : \"X\") : index + 1}\n                </span>\n                {option}\n              </button>\n            );\n          })}\n      </section>\n    </div>\n  );\n};\n\nexport default Question;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Question from \"../question\";\n\nimport \"./questions.css\";\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showFinished, setShowFinished] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\n        \"https://radiant-bayou-60840.herokuapp.com/questions\"\n      );\n      setQuestions(response.data.data);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  const onNextClicked = (selectedOption) => {\n    if (questions[currentIndex].correct_answer === selectedOption)\n      setScore(score + 1);\n    if (currentIndex + 1 > questions.length - 1) {\n      setShowFinished(true);\n      return;\n    }\n    setCurrentIndex(currentIndex + 1);\n  };\n\n  const resetQuiz = () => {\n    setCurrentIndex(0);\n    setShowFinished(false);\n    setScore(0);\n  };\n\n  return questions.length ? (\n    <div>\n      {showFinished ? (\n        <div className=\"results\">\n          <img\n            src=\"https://memegenerator.net/img/instances/70669406/your-watch-has-ended.jpg\"\n            alt=\"Your watch has ended\"\n          />\n          <h3>\n            Your results are out. You scored {score} out of {questions.length}\n          </h3>\n        </div>\n      ) : (\n        <Question\n          onNextClicked={onNextClicked}\n          question={questions[currentIndex]}\n          key={questions[currentIndex].correct_answer}\n        />\n      )}\n      {showFinished ? (\n        <button className=\"try-again\" onClick={resetQuiz}>\n          Try again\n        </button>\n      ) : (\n        <div className=\"questions-progress\">\n          {currentIndex + 1}/{questions.length}\n        </div>\n      )}\n    </div>\n  ) : (\n    <p>Loading</p>\n  );\n};\n\nexport default Questions;\n","import React, { useState } from \"react\";\nimport TagsInput from \"react-tagsinput\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport \"react-tagsinput/react-tagsinput.css\";\nimport \"./form.css\";\n\nconst QuestionForm = ({ closeModal, questionCreate }) => {\n  const [questionForm, setQuestion] = useState({\n    incorrect_answers: [],\n    question: \"\",\n    image: null,\n    correct_answer: \"\",\n  });\n  const inputProps = {\n    placeholder: \"Add an option and press enter\",\n    className: \"question-input\",\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Need to submit to the database\n    const response = await axios.post(\"/createquestion\", questionForm);\n    console.log(questionForm);\n    console.log(response);\n    closeModal();\n    toast(\"Your question has been created successfully\");\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault();\n    const {\n      target: { name, value },\n    } = event;\n\n    setQuestion({\n      ...questionForm,\n      [name]: value,\n    });\n  };\n\n  const handleTagsChange = (options) => {\n    setQuestion({\n      ...questionForm,\n      incorrect_answers: options,\n    });\n  };\n\n  return (\n    <form action=\"\" id=\"question-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"question\"\n        placeholder=\"Enter your question....\"\n        onChange={handleInputChange}\n        value={questionForm.question}\n        className=\"question-input\"\n      />\n      <TagsInput\n        value={questionForm.incorrect_answers}\n        onChange={handleTagsChange}\n        maxTags={4}\n        inputProps={inputProps}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Add the answer to the question...\"\n        value={questionForm.correct_answer}\n        onChange={handleInputChange}\n        className=\"question-input\"\n        name=\"correct_answer\"\n      />\n      {/* \n      <input\n        type=\"file\"\n        placeholder=\"Add the image...\"\n        id={questionForm.image}\n        onChange={handleImageChange}\n        multiple\n        className=\"image-upload\"\n        name=\"image\"\n        accept=\"image/*\"\n      />*/}\n\n      <div className=\"submit-area\">\n        <button className=\"submit-button\" type=\"submit\">\n          Create Question\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default QuestionForm;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport QuestionForm from \"../question-form\";\n\nimport \"./modal.css\";\nimport Close from \"./cancel.svg\";\n\nconst customStyles = {\n  content: {\n    top: \"40%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    border: \"none\",\n    width: \"450px\",\n    height: \"400px\",\n    background: \"#f7f8f9\",\n    boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\"\n  }\n};\n\nModal.setAppElement(\"#root\");\n\nconst QuestionModal = ({ isOpen, closeModal }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      contentLabel=\"Question Modal\"\n    >\n      <div className=\"modal-header\">\n        <p />\n        <p>Add a question</p>\n        <span onClick={closeModal} className=\"close\">\n          <img src={Close} alt=\"Press button to close modal\" />\n        </span>\n      </div>\n      <QuestionForm closeModal={closeModal} />\n    </Modal>\n  );\n};\n\nexport default QuestionModal;\n","import React, { useState } from \"react\";\n\nimport Questions from \"./components/questions\";\nimport QuestionModal from \"./components/question-modal\";\n\nimport Add from \"./add.svg\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div>Conocimientos Constitucionales y Socioculturales de EspaÃ±a</div>\n      </header>\n      <Questions />\n      <button className=\"add-question\" onClick={(_) => setModalOpen(true)}>\n        <img src={Add} alt=\"Click to create a new question\" />\n      </button>\n      <QuestionModal isOpen={modalOpen} closeModal={closeModal} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}